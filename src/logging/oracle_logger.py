"""Logger Oracle para integração com banco de dados"""

import os
from datetime import datetime
from typing import Optional

try:
    import oracledb  
except Exception:
    print("Aviso: pacote 'oracledb' não está disponível; integração Oracle desativada. Instale com: pip install oracledb")
    oracledb = None  


class OracleLogger:
    """Logger para salvar dados no banco Oracle"""
    
    def __init__(
        self,
        user: str,
        password: str,
        host: str,
        port: int,
        service_name: str,
    ) -> None:
        self._conn = None
        self._enabled = False
        if oracledb is None:
            print("Aviso: pacote 'oracledb' não está disponível; integração Oracle desativada.")
            return
        try:
            dsn = oracledb.makedsn(host, int(port), service_name=service_name)  
            self._conn = oracledb.connect(user=user, password=password, dsn=dsn)  
            self._enabled = True
            self._ensure_table()
        except Exception as e:
            print(f"Aviso: falha ao conectar no Oracle: {e}. Integração desativada.")
            self._conn = None
            self._enabled = False

    def _ensure_table(self) -> None:
        """Garante que a tabela MOTOS existe com estrutura correta"""
        if not self._enabled or self._conn is None:
            return
        try:
            with self._conn.cursor() as cur:  # type: ignore[attr-defined]
                cur.execute("SELECT 1 FROM user_tables WHERE table_name = :t", {"t": "MOTOS"})
                row = cur.fetchone()
                if not row:
                    cur.execute(
                        (
                            "CREATE TABLE MOTOS ("
                            "ID NUMBER GENERATED BY DEFAULT AS IDENTITY,"
                            "TRACK_ID NUMBER NULL,"
                            "X NUMBER(10,2) NOT NULL,"
                            "Y NUMBER(10,2) NOT NULL,"
                            "DETECTED_AT TIMESTAMP NOT NULL)"
                        )
                    )
                    self._conn.commit()
                else:
                    # Verifica/adiciona colunas necessárias
                    try:
                        cur.execute(
                            "SELECT 1 FROM user_tab_columns WHERE table_name = :t AND column_name = :c",
                            {"t": "MOTOS", "c": "TRACK_ID"},
                        )
                        if not cur.fetchone():
                            cur.execute("ALTER TABLE MOTOS ADD (TRACK_ID NUMBER NULL)")
                            self._conn.commit()
                    except Exception:
                        pass
                    
                    # Garante que há coluna ID e sequência
                    try:
                        cur.execute(
                            "SELECT 1 FROM user_tab_columns WHERE table_name = :t AND column_name = :c",
                            {"t": "MOTOS", "c": "ID"},
                        )
                        id_exists = bool(cur.fetchone())
                        if not id_exists:
                            try:
                                cur.execute("ALTER TABLE MOTOS ADD (ID NUMBER)")
                                self._conn.commit()
                            except Exception:
                                pass
                    except Exception:
                        pass
                    
                    # Cria sequência se não existir
                    try:
                        cur.execute("SELECT 1 FROM user_sequences WHERE sequence_name = :s", {"s": "MOTOS_SEQ"})
                        seq_exists = bool(cur.fetchone())
                        if not seq_exists:
                            start_with = 1
                            try:
                                cur.execute("SELECT NVL(MAX(ID),0) FROM MOTOS")
                                row2 = cur.fetchone()
                                max_id = int(row2[0]) if row2 and row2[0] is not None else 0
                                start_with = max_id + 1
                            except Exception:
                                start_with = 1
                            try:
                                cur.execute(f"CREATE SEQUENCE MOTOS_SEQ START WITH {start_with} INCREMENT BY 1 NOCACHE")
                                self._conn.commit()
                            except Exception:
                                pass
                    except Exception:
                        pass
        except Exception as e:
            print(f"Aviso: não foi possível garantir a tabela MOTOS: {e}")

    def insert_moto(self, track_id: Optional[int], x: float, y: float, detected_at: datetime) -> Optional[int]:
        """Insere uma nova moto no banco e retorna o ID gerado"""
        if not self._enabled or self._conn is None:
            return None
        try:
            with self._conn.cursor() as cur:  
                db_id: Optional[int] = None
                out_id = None
                try:
                    if hasattr(cur, "var") and hasattr(oracledb, "NUMBER"):
                        out_id = cur.var(oracledb.NUMBER)  
                        cur.execute(
                            "INSERT INTO MOTOS (ID, TRACK_ID, X, Y, DETECTED_AT) VALUES (MOTOS_SEQ.NEXTVAL, :id, :x, :y, :dt) RETURNING ID INTO :out_id",
                            {"id": track_id, "x": float(round(x, 2)), "y": float(round(y, 2)), "dt": detected_at, "out_id": out_id},
                        )
                        try:
                            val = out_id.getvalue()  
                            if isinstance(val, list):
                                val = val[0]
                            if val is not None:
                                db_id = int(val)
                        except Exception:
                            db_id = None
                    else:
                        cur.execute(
                            "INSERT INTO MOTOS (ID, TRACK_ID, X, Y, DETECTED_AT) VALUES (MOTOS_SEQ.NEXTVAL, :id, :x, :y, :dt)",
                            {"id": track_id, "x": float(round(x, 2)), "y": float(round(y, 2)), "dt": detected_at},
                        )
                except Exception:
                    try:
                        if hasattr(cur, "var") and hasattr(oracledb, "NUMBER"):
                            out_id = cur.var(oracledb.NUMBER)  
                            cur.execute(
                                "INSERT INTO MOTOS (TRACK_ID, X, Y, DETECTED_AT) VALUES (:id, :x, :y, :dt) RETURNING ID INTO :out_id",
                                {"id": track_id, "x": float(round(x, 2)), "y": float(round(y, 2)), "dt": detected_at, "out_id": out_id},
                            )
                            try:
                                val = out_id.getvalue()  
                                if isinstance(val, list):
                                    val = val[0]
                                if val is not None:
                                    db_id = int(val)
                            except Exception:
                                db_id = None
                        else:
                            cur.execute(
                                "INSERT INTO MOTOS (TRACK_ID, X, Y, DETECTED_AT) VALUES (:id, :x, :y, :dt)",
                                {"id": track_id, "x": float(round(x, 2)), "y": float(round(y, 2)), "dt": detected_at},
                            )
                    except Exception:
                        pass
            self._conn.commit()
            return db_id
        except Exception as e:
            print(f"Aviso: falha ao inserir na tabela MOTOS: {e}")
            return None

    def close(self) -> None:
        """Fecha a conexão com o banco"""
        try:
            if self._conn is not None:
                self._conn.close()
        except Exception:
            pass


def create_oracle_logger_from_env() -> Optional[OracleLogger]:
    """Cria logger Oracle usando variáveis de ambiente"""
    user = os.getenv("ORACLE_USER", "xxxx")
    password = os.getenv("ORACLE_PASSWORD", "xxxx")
    host = os.getenv("ORACLE_HOST", "xxxx")
    port = int(os.getenv("ORACLE_PORT", "xxxx") or "xxxx")
    service = os.getenv("ORACLE_SERVICE", "xxxx")
    try:
        return OracleLogger(user=user, password=password, host=host, port=port, service_name=service)
    except Exception:
        return None
